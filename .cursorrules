# Cursor AI 助手配置文件
# 这个文件定义了 AI 助手在项目中的行为规则

## 项目信息
- 这是一个基于 Vue 3 + TypeScript + Vite 的前端项目
- 遵循现代前端开发最佳实践

## 代码风格和规范
- 使用 TypeScript 进行类型安全的开发
- 遵循 Vue 3 Composition API 的最佳实践
- 使用 ESLint 和 Prettier 进行代码格式化
- 组件命名使用 kebab-case
- 文件命名使用 kebab-case
- 必须使用 pnpm

## 开发规范
- 公共组件应该放在 src/components/ 目录下
- 页面组件应该放在 src/views/ 目录下
- 使用 TypeScript 严格模式
- 严谨使用 any 类型
- 使用 Vue Router 进行路由管理
- 使用 Pinia 进行状态管理
- 使用 Axios 进行 API 请求
- 类型声明统一放在types文件夹内

## 代码质量要求
- 所有函数和变量都应该有明确的类型定义
- 组件 props 必须定义类型
- 使用 async/await 而不是 Promise.then()
- 优先使用箭头函数
- 使用 const 声明不会被重新赋值的变量

## 文件组织
- 保持文件结构清晰，相关文件放在同一目录
- 使用 index.ts 文件进行模块导出
- 样式文件使用 scoped 属性避免全局污染
- 工具函数放在 src/utils/ 目录下

## 性能优化
- 使用 Vue 3 的响应式系统
- 合理使用 computed 和 watch
- 避免在模板中使用复杂表达式
- 使用 v-memo 优化列表渲染
- 合理使用异步组件

## 测试要求
- 重要功能应该有单元测试
- 使用 Vitest 作为测试框架
- 测试文件命名以 .test.ts 或 .spec.ts 结尾

## 文档要求
- 复杂组件应该有注释说明
- API 接口应该有类型定义
- 重要的业务逻辑应该有文档说明

## 安全要求
- 避免在代码中硬编码敏感信息
- 使用环境变量管理配置
- 对用户输入进行验证和过滤
- 使用 HTTPS 进行数据传输

## 响应式设计
- 使用 CSS Grid 和 Flexbox 进行布局
- 支持移动端和桌面端
- 使用相对单位（rem, em, %）而不是固定像素
- 考虑不同屏幕尺寸的适配

## 无障碍性
- 使用语义化的 HTML 标签
- 为交互元素添加适当的 ARIA 属性
- 确保键盘导航的可用性
- 提供足够的颜色对比度 